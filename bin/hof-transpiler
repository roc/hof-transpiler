#!/usr/bin/env node

var mkdirp = require('mkdirp');
var fs = require('fs');
var walk = require('walk');
var path = require('path');
var _ = require('underscore');
var underscoreDeepExtend = require('underscore-deep-extend');
_.mixin({deepExtend: underscoreDeepExtend(_)});
var rimraf = require('rimraf');
var argv = require('minimist')(process.argv.slice(2));
var sources = argv._;
var shared = argv.s || argv.shared;
var writeShared = argv.writeShared || argv.w;

if (!Array.isArray(shared)) {
  shared = [shared];
}

shared.reverse();

if (!sources.length) {
  throw new Error('No src specified');
}

if (writeShared !== true) {
  sources = sources.filter(function (source) {
    return shared.indexOf(source) === -1
  });
}

function parseFileSync(path) {
  try {
    return JSON.parse(fs.readFileSync(path, 'utf8'));
  } catch (error) {
    throw new Error(error);
  }
}

function getLanguage(path) {
  var parts = path.split('/');
  return parts[parts.length - 1];
}

_.each(sources, function (src) {
  var walker = walk.walk(src);
  var writeFileStream = {};
  var firstFileForDir = {};

  walker.on('directory', function (root, dirStats, next) {
    var languagePath = path.resolve(root.replace('/src', ''), dirStats.name);

    rimraf(languagePath, function (err) {
      if (err) {
        throw Error(err);
      }

      mkdirp(languagePath, function (err) {
        if (err) {
          throw Error(err);
        }
        writeFileStream[dirStats.name] = require('fs').createWriteStream(path.resolve(root.replace('/src', ''), dirStats.name, 'default.json'));
        writeFileStream[dirStats.name].write('{');
        next();
      });
    });
  });

  walker.on('file', function (root, fileStats, next) {
    var lang = getLanguage(root);
    var readStream = fs.createReadStream(path.resolve(root, fileStats.name));

    if (!firstFileForDir[lang]) {
      writeFileStream[lang].write('"' + fileStats.name.replace('.json', '') + '": ');
      firstFileForDir[lang] = true;
    } else {
      writeFileStream[lang].write(',"' + fileStats.name.replace('.json', '') + '": ');
    }

    readStream.on('data', function (chunk) {
      writeFileStream[lang].write(chunk);
    });

    readStream.on('end', function () {
      next();
    });
  });

  walker.on('end', function () {
    _.each(writeFileStream, function (writerStream) {
      var sharedMap = {};

      shared.forEach(function (sharedSource) {
        walk.walk(sharedSource).on('file', function (root, fileStats, next) {
          var lang = getLanguage(root);
          var fileName = fileStats.name.replace('.json', '');
          var streamLang = getLanguage(path.parse(writerStream.path).dir);
          var parsedStream = null;
          var stringStream = '';

          sharedMap[lang] = sharedMap[lang] || {};
          sharedMap[streamLang] = sharedMap[streamLang] || {};
          sharedMap[lang][fileName] = parseFileSync(path.resolve(root, fileStats.name));

          parsedStream = sharedMap[streamLang];
          _.deepExtend(parsedStream, parseFileSync(writerStream.path));
          stringStream = JSON.stringify(parsedStream, null, '\t');

          fs.writeFileSync(writerStream.path, stringStream, 'utf8');
          next();
        });
      });

      writerStream.end('}');
    });
  });
});
